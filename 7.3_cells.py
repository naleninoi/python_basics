# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек
# клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение
# и целочисленное (с округлением до целого) деление клеток, соответственно.

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки
# должно равняться сумме ячеек исходных двух клеток.

# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.

# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется
# как произведение количества ячеек этих двух клеток.

# Деление. Создается общая клетка из двух. Число ячеек общей клетки
# определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает,
# то в последний ряд записываются все оставшиеся.

class Cell:
    def __init__(self, name, size):
        self.name = name
        self.size = size

    def __str__(self):
        return (f'Живая клетка, имя {self.name}, размер {self.size} ячеек')

    def __add__(self, other):
        return Cell(self.name + other.name, self.size + other.size)

    def __sub__(self, other):
        if self.size > other.size:
            return Cell(self.name, self.size - other.size)
        else:
            print('Не бывает клеток с нулевым или отрицательным размером')

    def __mul__(self, other):
        return Cell(self.name + other.name, self.size * other.size)

    def __truediv__(self, other):
        if self.size >= other.size:
            return Cell(self.name, self.size // other.size)
        else:
            print('Не бывает клеток с нулевым размером')

    def make_order(self, line):
        if self.size < line:
            print('Клетка еще слишком мала...')
        else:
            order = ''
            for i in range(self.size // line):
                order += (('*' * line) + '\n')
            order += ('*' * (self.size % line))
            return order


cell_A = Cell('А', 16)
cell_B = Cell('Б', 9)
print(cell_A)
print(cell_A + cell_B)
print(cell_A - cell_B)
print(cell_A * cell_B)
print(cell_A / cell_B)
print(cell_A.make_order(6))
